diff --git a/.idea/first-quiz.iml b/.idea/first-quiz.iml
new file mode 100644
index 0000000..351d51a
--- /dev/null
+++ b/.idea/first-quiz.iml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.11 (venv)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/part2/.idea/.gitignore b/part2/.idea/.gitignore
new file mode 100644
index 0000000..26d3352
--- /dev/null
+++ b/part2/.idea/.gitignore
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
diff --git a/part2/.idea/compiler.xml b/part2/.idea/compiler.xml
new file mode 100644
index 0000000..77c1d82
--- /dev/null
+++ b/part2/.idea/compiler.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="vz-first-quiz" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
\ No newline at end of file
diff --git a/part2/.idea/encodings.xml b/part2/.idea/encodings.xml
new file mode 100644
index 0000000..aa00ffa
--- /dev/null
+++ b/part2/.idea/encodings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/part2/.idea/jarRepositories.xml b/part2/.idea/jarRepositories.xml
new file mode 100644
index 0000000..712ab9d
--- /dev/null
+++ b/part2/.idea/jarRepositories.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
diff --git a/part2/.idea/misc.xml b/part2/.idea/misc.xml
new file mode 100644
index 0000000..b487a3b
--- /dev/null
+++ b/part2/.idea/misc.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" project-jdk-name="11" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
diff --git a/part2/.idea/vcs.xml b/part2/.idea/vcs.xml
new file mode 100644
index 0000000..6c0b863
--- /dev/null
+++ b/part2/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/part2/first_quiz_submission.patch b/part2/first_quiz_submission.patch
new file mode 100644
index 0000000..0c51cdb
--- /dev/null
+++ b/part2/first_quiz_submission.patch
@@ -0,0 +1,254 @@
+diff --git a/.idea/first-quiz.iml b/.idea/first-quiz.iml
+new file mode 100644
+index 0000000..351d51a
+--- /dev/null
++++ b/.idea/first-quiz.iml
+@@ -0,0 +1,8 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<module type="PYTHON_MODULE" version="4">
++  <component name="NewModuleRootManager">
++    <content url="file://$MODULE_DIR$" />
++    <orderEntry type="jdk" jdkName="Python 3.11 (venv)" jdkType="Python SDK" />
++    <orderEntry type="sourceFolder" forTests="false" />
++  </component>
++</module>
+\ No newline at end of file
+diff --git a/part2/.idea/.gitignore b/part2/.idea/.gitignore
+new file mode 100644
+index 0000000..26d3352
+--- /dev/null
++++ b/part2/.idea/.gitignore
+@@ -0,0 +1,3 @@
++# Default ignored files
++/shelf/
++/workspace.xml
+diff --git a/part2/.idea/compiler.xml b/part2/.idea/compiler.xml
+new file mode 100644
+index 0000000..77c1d82
+--- /dev/null
++++ b/part2/.idea/compiler.xml
+@@ -0,0 +1,13 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="CompilerConfiguration">
++    <annotationProcessing>
++      <profile name="Maven default annotation processors profile" enabled="true">
++        <sourceOutputDir name="target/generated-sources/annotations" />
++        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
++        <outputRelativeToContentRoot value="true" />
++        <module name="vz-first-quiz" />
++      </profile>
++    </annotationProcessing>
++  </component>
++</project>
+\ No newline at end of file
+diff --git a/part2/.idea/encodings.xml b/part2/.idea/encodings.xml
+new file mode 100644
+index 0000000..aa00ffa
+--- /dev/null
++++ b/part2/.idea/encodings.xml
+@@ -0,0 +1,7 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="Encoding">
++    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
++    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
++  </component>
++</project>
+\ No newline at end of file
+diff --git a/part2/.idea/jarRepositories.xml b/part2/.idea/jarRepositories.xml
+new file mode 100644
+index 0000000..712ab9d
+--- /dev/null
++++ b/part2/.idea/jarRepositories.xml
+@@ -0,0 +1,20 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="RemoteRepositoriesConfiguration">
++    <remote-repository>
++      <option name="id" value="central" />
++      <option name="name" value="Central Repository" />
++      <option name="url" value="https://repo.maven.apache.org/maven2" />
++    </remote-repository>
++    <remote-repository>
++      <option name="id" value="central" />
++      <option name="name" value="Maven Central repository" />
++      <option name="url" value="https://repo1.maven.org/maven2" />
++    </remote-repository>
++    <remote-repository>
++      <option name="id" value="jboss.community" />
++      <option name="name" value="JBoss Community repository" />
++      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
++    </remote-repository>
++  </component>
++</project>
+\ No newline at end of file
+diff --git a/part2/.idea/misc.xml b/part2/.idea/misc.xml
+new file mode 100644
+index 0000000..b487a3b
+--- /dev/null
++++ b/part2/.idea/misc.xml
+@@ -0,0 +1,12 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="ExternalStorageConfigurationManager" enabled="true" />
++  <component name="MavenProjectsManager">
++    <option name="originalFiles">
++      <list>
++        <option value="$PROJECT_DIR$/pom.xml" />
++      </list>
++    </option>
++  </component>
++  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" project-jdk-name="11" project-jdk-type="JavaSDK" />
++</project>
+\ No newline at end of file
+diff --git a/part2/.idea/vcs.xml b/part2/.idea/vcs.xml
+new file mode 100644
+index 0000000..6c0b863
+--- /dev/null
++++ b/part2/.idea/vcs.xml
+@@ -0,0 +1,6 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="VcsDirectoryMappings">
++    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
++  </component>
++</project>
+\ No newline at end of file
+diff --git a/part2/pom.xml b/part2/pom.xml
+index 3117aed..f22145f 100644
+--- a/part2/pom.xml
++++ b/part2/pom.xml
+@@ -25,6 +25,11 @@
+       <version>5.10.0</version>
+       <scope>test</scope>
+     </dependency>
++      <dependency>
++          <groupId>commons-beanutils</groupId>
++          <artifactId>commons-beanutils</artifactId>
++          <version>1.7.0</version>
++      </dependency>
+   </dependencies>
+ 
+   <build>
+diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
+index 61c1fdd..0f737a1 100644
+--- a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
++++ b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
+@@ -1,5 +1,7 @@
+ package org.velezreyes.quiz.question6;
+ 
++import java.lang.String;
++
+ public interface Drink {
+   public String getName();
+ 
+diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java
+new file mode 100644
+index 0000000..a756d12
+--- /dev/null
++++ b/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java
+@@ -0,0 +1,21 @@
++package org.velezreyes.quiz.question6;
++
++public class DrinkImpl implements Drink {
++    private String name;
++    private boolean isFizzy;
++
++    public DrinkImpl(String name, boolean isFizzy) {
++        this.name = name;
++        this.isFizzy = isFizzy;
++    }
++
++    @Override
++    public String getName() {
++        return name;
++    }
++
++    @Override
++    public boolean isFizzy() {
++        return isFizzy;
++    }
++}
+diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java
+index 3f92825..69f37b3 100644
+--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java
++++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java
+@@ -1,5 +1,6 @@
+ package org.velezreyes.quiz.question6;
+ 
++
+ public interface VendingMachine {
+ 
+   public void insertQuarter();
+diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+index 85742c4..d1164c4 100644
+--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
++++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+@@ -1,9 +1,64 @@
+ package org.velezreyes.quiz.question6;
+ 
+-public class VendingMachineImpl {
++import java.util.HashMap;
++import java.util.Map;
++
++import org.velezreyes.quiz.question6.Drink;
++
++public class VendingMachineImpl implements VendingMachine{
++  private Map<String, Drink> drinks;
++  private Map<String, Integer> drinkPrices;
++
++  private int balance;
++
++  private static VendingMachineImpl instance;
++  public VendingMachineImpl(){
++    this.drinks = new HashMap<>();
++    this.drinks.put("ScottCola", new DrinkImpl("ScottCola", true));
++    this.drinks.put("KarenTea", new DrinkImpl("KarenTea", false));
++
++    this.drinkPrices = new HashMap<>();
++    this.drinkPrices.put("ScottCola", 75);
++    this.drinkPrices.put("KarenTea", 100);
++
++    this.balance = 0;
++  }
+ 
+   public static VendingMachine getInstance() {
+     // Fix me!
+-    return null;
++    if(instance == null) {
++      instance = new VendingMachineImpl();
++    }
++
++    return instance;
++  }
++
++  @Override
++  public void insertQuarter() {
++    this.balance += 25;
++  }
++
++  @Override
++  public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
++    if (!this.drinks.containsKey(name)) {
++      throw new UnknownDrinkException();
++    }
++    int drinkPrice = getDrinkPrice(name); // Obtener el precio de la bebida (puedes implementar esta función)
++    if (this.balance < drinkPrice) {
++      throw new NotEnoughMoneyException();
++    }
++    this.balance -= drinkPrice;
++    return this.drinks.get(name);
++  }
++
++  private int getDrinkPrice(String name) throws UnknownDrinkException {
++    if (drinkPrices.containsKey(name)) {
++      return drinkPrices.get(name);
++    }
++    throw new UnknownDrinkException();
+   }
++
++
+ }
++
++
diff --git a/part2/pom.xml b/part2/pom.xml
index 3117aed..f22145f 100644
--- a/part2/pom.xml
+++ b/part2/pom.xml
@@ -25,6 +25,11 @@
       <version>5.10.0</version>
       <scope>test</scope>
     </dependency>
+      <dependency>
+          <groupId>commons-beanutils</groupId>
+          <artifactId>commons-beanutils</artifactId>
+          <version>1.7.0</version>
+      </dependency>
   </dependencies>
 
   <build>
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
index 61c1fdd..0f737a1 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
@@ -1,5 +1,7 @@
 package org.velezreyes.quiz.question6;
 
+import java.lang.String;
+
 public interface Drink {
   public String getName();
 
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java
new file mode 100644
index 0000000..a756d12
--- /dev/null
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java
@@ -0,0 +1,21 @@
+package org.velezreyes.quiz.question6;
+
+public class DrinkImpl implements Drink {
+    private String name;
+    private boolean isFizzy;
+
+    public DrinkImpl(String name, boolean isFizzy) {
+        this.name = name;
+        this.isFizzy = isFizzy;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public boolean isFizzy() {
+        return isFizzy;
+    }
+}
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java
index 3f92825..69f37b3 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java
@@ -1,5 +1,6 @@
 package org.velezreyes.quiz.question6;
 
+
 public interface VendingMachine {
 
   public void insertQuarter();
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..d1164c4 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,64 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+import java.util.HashMap;
+import java.util.Map;
+
+import org.velezreyes.quiz.question6.Drink;
+
+public class VendingMachineImpl implements VendingMachine{
+  private Map<String, Drink> drinks;
+  private Map<String, Integer> drinkPrices;
+
+  private int balance;
+
+  private static VendingMachineImpl instance;
+  public VendingMachineImpl(){
+    this.drinks = new HashMap<>();
+    this.drinks.put("ScottCola", new DrinkImpl("ScottCola", true));
+    this.drinks.put("KarenTea", new DrinkImpl("KarenTea", false));
+
+    this.drinkPrices = new HashMap<>();
+    this.drinkPrices.put("ScottCola", 75);
+    this.drinkPrices.put("KarenTea", 100);
+
+    this.balance = 0;
+  }
 
   public static VendingMachine getInstance() {
     // Fix me!
-    return null;
+    if(instance == null) {
+      instance = new VendingMachineImpl();
+    }
+
+    return instance;
+  }
+
+  @Override
+  public void insertQuarter() {
+    this.balance += 25;
+  }
+
+  @Override
+  public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
+    if (!this.drinks.containsKey(name)) {
+      throw new UnknownDrinkException();
+    }
+    int drinkPrice = getDrinkPrice(name); // Obtener el precio de la bebida (puedes implementar esta función)
+    if (this.balance < drinkPrice) {
+      throw new NotEnoughMoneyException();
+    }
+    this.balance -= drinkPrice;
+    return this.drinks.get(name);
+  }
+
+  private int getDrinkPrice(String name) throws UnknownDrinkException {
+    if (drinkPrices.containsKey(name)) {
+      return drinkPrices.get(name);
+    }
+    throw new UnknownDrinkException();
   }
+
+
 }
+
+
diff --git a/part3/.idea/.gitignore b/part3/.idea/.gitignore
new file mode 100644
index 0000000..26d3352
--- /dev/null
+++ b/part3/.idea/.gitignore
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
diff --git a/part3/.idea/misc.xml b/part3/.idea/misc.xml
new file mode 100644
index 0000000..639900d
--- /dev/null
+++ b/part3/.idea/misc.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/part3/.idea/modules.xml b/part3/.idea/modules.xml
new file mode 100644
index 0000000..97dfc80
--- /dev/null
+++ b/part3/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/part3.iml" filepath="$PROJECT_DIR$/.idea/part3.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/part3/.idea/part3.iml b/part3/.idea/part3.iml
new file mode 100644
index 0000000..d6ebd48
--- /dev/null
+++ b/part3/.idea/part3.iml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/part3/.idea/vcs.xml b/part3/.idea/vcs.xml
new file mode 100644
index 0000000..6c0b863
--- /dev/null
+++ b/part3/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/part3/security_question.md b/part3/security_question.md
new file mode 100644
index 0000000..76a26b1
--- /dev/null
+++ b/part3/security_question.md
@@ -0,0 +1,20 @@
+Para garantizar la seguridad de la startup que instala paneles solares, implementada 
+con contenedores en Kubernetes en Amazon Web Services, debemos considerar las siguientes
+prácticas:
+
+1. Inyección: Buscamos las débilidades en el backend que puedan ser provocados por ataques tipo inyección SQL. Para asegurarnos de esto, debemos seguir los siguientes pasos: 
+    * Supervisar las modificaciones automáticas.
+    * Proporcionar protección completa al servidor.
+    * Blindar la base de datos y utilizar códigos seguros.
+2. Autenticación: Revisar los mecanismos de autenticación utilizados para la aplicación en la base de datos y el backend de la aplicación, cuando estas credenciales de autenticación son comprometidas, las sesiones de usuario y las identidades pueden ser secuestradas. Para evitar esto podemos usar una autenticación en dos fases, además de limitar o retrasar los intentos repetidos de inicio de sesión.
+3. Exposición de datos confidenciales: Debemos asegurar de que la información sensible del cliente incluidas contraseñas o direcciones particulares sean almacenadas de manera segura. Para ellos utilizaríamos cifrado en reposo y en tránsito para proteger los datos además de desactivar el almacenamiento en caché de cualquier dato confidencial.
+4. Entidades XML externas: Para prevenir este tipo de vulnerabilidades la aplicación utilizaría formatos tipo JSON y se evitarían o deshabilitarían el uso de XML.
+5. Perdidas de control de acceso: Se debe buscar que la aplicación garantice que solo los empleados accedan y modifiquen los recursos que están autorizados, esto puede lograrse por medio de tokens de autorización y mecanismos de control estrictos sobre estos mismos.
+6. Configuración incorrecta de seguridad: Se debe revisar periódicamente la configuración de Kubernets, de la interfaz web y la base de datos, manteniendo estas actualizadas y con las mejores prácticas, además de limitar los accesos y permisos.
+7. Scripting entre sitios: Se debe evitar que los usuarios añadan código personalizado, para ello se evitarán las solicitudes HTTP que no sean de confianza.
+8. Deserialización insegura: Aunque se pueden tomar medidas para intentar atrapar a los atacantes, como la supervisión de la deserialización y la implementación de comprobaciones de tipo, la única forma segura de protegerse antes los ataques de deserialización insegura es prohibir la deserialización de datos desde fuentes no fiables.
+9. Uso de componentes vulnerables conocidas: Para evitar esto es recomendable el parcheo y actualización periódica del software, así como dependencias utilizadas en él.
+10. Registro y monitoreo insuficientes: Se debe implementar un registro y monitoreo sólidos para detectar y responder a incidentes y anomalías de seguridad, creando alertas de actividades sospechosas e implementando registros periódicos.
+
+
+Es bueno además implementar un estricto control de acceso basado en roles, realizar capacitaciones periodicas de seguridad, emplear herramientas automatizadas de escaneo de seguridad, realizar auditorias periódicas y pruebas de penetración, implementar cifrado y enmascaramiento de datos, realizar copias de seguridad de los datos periódicamente.
\ No newline at end of file
